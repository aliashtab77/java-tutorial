
// Java abstract keyword is used to declare an abstract class. An abstract class can provide the implementation of the interface. It can have abstract and non-abstract methods.
abstract
// Java boolean keyword is used to declare a variable as a boolean type. It can hold True and False values only.
boolean
// Java break keyword is used to break the loop or switch statement. It breaks the current flow of the program at specified conditions.
break 
// Java byte keyword is used to declare a variable that can hold 8-bit data values.
byte
// Java case keyword is used with the switch statements to mark blocks of text.
case
// Java catch keyword is used to catch the exceptions generated by try statements. It must be used after the try block only.
catch
// Java char keyword is used to declare a variable that can hold unsigned 16-bit Unicode characters
char
// Java class keyword is used to declare a class.
class
// Java continue keyword is used to continue the loop. It continues the current flow of the program and skips the remaining code at the specified condition.
continue
// Java default keyword is used to specify the default block of code in a switch statement.
default
// Java do keyword is used in the control statement to declare a loop. It can iterate a part of the program several times.
do
// Java double keyword is used to declare a variable that can hold 64-bit floating-point number.
double
// Java else keyword is used to indicate the alternative branches in an if statement.
else
// Java enum keyword is used to define a fixed set of constants. Enum constructors are always private or default.
enum
// Java extends keyword is used to indicate that a class is derived from another class or interface.
extends
// Java final keyword is used to indicate that a variable holds a constant value. It is used with a variable. It is used to restrict the user from updating the value of the variable.
final
// Java finally keyword indicates a block of code in a try-catch structure. This block is always executed whether an exception is handled or not.
finally
// Java float keyword is used to declare a variable that can hold a 32-bit floating-point number.
float
// Java for keyword is used to start a for loop. It is used to execute a set of instructions/functions repeatedly when some condition becomes true. If the number of iteration is fixed, it is recommended to use for loop.
for
// Java if keyword tests the condition. It executes the if block if the condition is true.
if
// Java implements keyword is used to implement an interface.
implements
// Java import keyword makes classes and interfaces available and accessible to the current source code.
import
// Java instanceof keyword is used to test whether the object is an instance of the specified class or implements an interface.
instanceof
// Java int keyword is used to declare a variable that can hold a 32-bit signed integer.
int
// Java interface keyword is used to declare an interface. It can have only abstract methods.
interface
// Java long keyword is used to declare a variable that can hold a 64-bit integer.
long
// Java native keyword is used to specify that a method is implemented in native code using JNI (Java Native Interface).
native
// Java new keyword is used to create new objects.
new
// Java null keyword is used to indicate that a reference does not refer to anything. It removes the garbage value.
null
// Java package keyword is used to declare a Java package that includes the classes.
package
// Java private keyword is an access modifier. It is used to indicate that a method or variable may be accessed only in the class in which it is declared.
private
// Java protected keyword is an access modifier. It can be accessible within the package and outside the package but through inheritance only. It can't be applied with the class.
protected
// Java public keyword is an access modifier. It is used to indicate that an item is accessible anywhere. It has the widest scope among all other modifiers.
public
// Java return keyword is used to return from a method when its execution is complete.
return
// Java short keyword is used to declare a variable that can hold a 16-bit integer.
short
// Java static keyword is used to indicate that a variable or method is a class method. The static keyword in Java is mainly used for memory management.
static
// Java strictfp is used to restrict the floating-point calculations to ensure portability.
strictfp
// Java super keyword is a reference variable that is used to refer to parent class objects. It can be used to invoke the immediate parent class method.
super
// The Java switch keyword contains a switch statement that executes code based on test value. The switch statement tests the equality of a variable against multiple values.
switch
// Java synchronized keyword is used to specify the critical sections or methods in multithreaded code.
synchronized
// Java this keyword can be used to refer the current object in a method or constructor.
this
// The Java throw keyword is used to explicitly throw an exception. The throw keyword is mainly used to throw custom exceptions. It is followed by an instance.
throw
// The Java throws keyword is used to declare an exception. Checked exceptions can be propagated with throws.
throws
// Java transient keyword is used in serialization. If you define any data member as transient, it will not be serialized.
transient
// Java try keyword is used to start a block of code that will be tested for exceptions. The try block must be followed by either catch or finally block.
try
// Java void keyword is used to specify that a method does not have a return value.
void
// Java volatile keyword is used to indicate that a variable may change asynchronously.
volatile
// Java while keyword is used to start a while loop. This loop iterates a part of the program several times. If the number of iteration is not fixed, it is recommended to use the while loop.
while